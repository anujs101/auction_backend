{
  "info": {
    "name": "Energy Auction Platform API",
    "description": "Complete API testing collection for the Solana-based energy auction platform",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{authToken}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000/api",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "🔐 Authentication",
      "item": [
        {
          "name": "Initialize Authentication",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"walletAddress\": \"{{walletAddress}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/init",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "init"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "const response = pm.response.json();",
                  "pm.environment.set('authNonce', response.data.nonce);",
                  "pm.environment.set('authMessage', response.data.message);"
                ]
              }
            }
          ]
        },
        {
          "name": "Wallet Authentication",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"walletAddress\": \"{{walletAddress}}\",\n  \"signature\": \"{{walletSignature}}\",\n  \"message\": \"{{authMessage}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/verify",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "verify"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Authentication successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('authToken', response.data.token);",
                  "    pm.environment.set('userId', response.data.user.id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get User Profile",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "profile"]
            }
          }
        }
      ]
    },
    {
      "name": "⏰ Timeslot Management",
      "item": [
        {
          "name": "List Timeslots",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/timeslots?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["timeslots"],
              "query": [
                {"key": "page", "value": "1"},
                {"key": "limit", "value": "10"}
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "const response = pm.response.json();",
                  "if (response.data.length > 0) {",
                  "    pm.environment.set('testTimeslotId', response.data[0].id);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Timeslot Details",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/timeslots/{{testTimeslotId}}",
              "host": ["{{baseUrl}}"],
              "path": ["timeslots", "{{testTimeslotId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "💰 Bid Management",
      "item": [
        {
          "name": "Place Bid",
          "request": {
            "method": "POST",
            "header": [
              {"key": "Content-Type", "value": "application/json"},
              {"key": "Authorization", "value": "Bearer {{authToken}}"}
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"timeslotId\": \"{{testTimeslotId}}\",\n  \"price\": \"0.15\",\n  \"quantity\": \"100\",\n  \"txSignature\": \"test-signature\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/bids",
              "host": ["{{baseUrl}}"],
              "path": ["bids"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Bid placement successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('testBidId', response.data.id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get User Bid History",
          "request": {
            "method": "GET",
            "header": [
              {"key": "Authorization", "value": "Bearer {{authToken}}"}
            ],
            "url": {
              "raw": "{{baseUrl}}/my/bids?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["my", "bids"],
              "query": [
                {"key": "page", "value": "1"},
                {"key": "limit", "value": "10"}
              ]
            }
          }
        }
      ]
    },
    {
      "name": "⚡ Supply Management",
      "item": [
        {
          "name": "Commit Supply",
          "request": {
            "method": "POST",
            "header": [
              {"key": "Content-Type", "value": "application/json"},
              {"key": "Authorization", "value": "Bearer {{authToken}}"}
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"timeslotId\": \"{{testTimeslotId}}\",\n  \"price\": \"0.12\",\n  \"quantity\": \"200\",\n  \"txSignature\": \"test-supply-signature\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/supplies",
              "host": ["{{baseUrl}}"],
              "path": ["supplies"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Supply commitment successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('testSupplyId', response.data.id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get User Supplies",
          "request": {
            "method": "GET",
            "header": [
              {"key": "Authorization", "value": "Bearer {{authToken}}"}
            ],
            "url": {
              "raw": "{{baseUrl}}/my/supplies?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["my", "supplies"],
              "query": [
                {"key": "page", "value": "1"},
                {"key": "limit", "value": "10"}
              ]
            }
          }
        }
      ]
    },
    {
      "name": "🔧 System & Health",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Health check successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.status).to.eql('healthy');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Blockchain Health",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/blockchain/health",
              "host": ["{{baseUrl}}"],
              "path": ["blockchain", "health"]
            }
          }
        }
      ]
    }
  ]
}
